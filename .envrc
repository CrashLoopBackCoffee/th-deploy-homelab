# This repo uses uv for dependency management
uv sync --locked

export BASEDIR=$(git rev-parse --show-toplevel)

# Add helper scripts in deploy-base to PATH
export PATH="${BASEDIR}/scripts:${PATH}"


ONE_PASSWORD_TOKEN="op://Pulumi/7pgmqbvpk6xaps4exrjgbjyy24/password"

# Suppress bogus warning messages like
# resource plugin pulumi-python is expected to have version >=3.6.0, but has 0.1.0;
# the wrong version may be on your path, or this may be a bug in the plugin
export PULUMI_DEV=1

# Suppress pulumi phone home
export PULUMI_SKIP_UPDATE_CHECK=true

# Make pyright fast again (skip broken update check with proxy)
export PYRIGHT_PYTHON_IGNORE_WARNINGS=1

# Enable patch force to force pulumi ownership when using server side apply (default in pulumi-kubernetes>=4.0)
# https://www.pulumi.com/registry/packages/kuberneteas/how-to-guides/managing-resources-with-server-side-apply/#handle-field-conflicts-on-existing-resources
export PULUMI_K8S_ENABLE_PATCH_FORCE=true

#  check if repo is enabled for pre-commit by checking if present in venv
if [ -f "./.venv/bin/pre-commit" ] && [ "${SKIP_PRE_COMMIT:-false}" != "true" ]; then

  #  link config if not present
  if [ ! -f ".pre-commit-config.yaml" ]; then
    echo -e "${GREEN}Linking .pre-commit-config.yaml$NC"
    ln -fs "${BASEDIR}/.pre-commit-config.yaml" .
  fi

  # Install pre-commit hook
  if [ ! -f ".git/hooks/pre-commit" ]; then
    echo -e "${GREEN}Installing pre-commit hook$NC"
    ./.venv/bin/pre-commit install
  fi

  # Install pre-push hook
  if [ ! -f ".git/hooks/pre-push" ]; then
    echo -e "${GREEN}Installing pre-push hook$NC"
    ./.venv/bin/pre-commit install --hook-type pre-push
  fi

  # Install hooks to save time on first commit
  echo "Ensuring pre-commit hooks are installed"
  ./.venv/bin/pre-commit install-hooks
else
  echo -e "${YELLOW}Pre-commit not enabled for this repo!$NC"
  echo -e "To enable pre-commit, run: ${PURPLE}poetry add --group dev pre-commit filelock distlib pyright ruff yamllint$NC"
fi

# Generate config schema
./.venv/bin/python3 "${BASEDIR}/scripts/generate-config-schema"

# Handle ONE_PASSWORD_TOKEN if exists
echo -e "Setting up 1Password CLI"
if [ -z "${OP_SERVICE_ACCOUNT_TOKEN}" ]; then
  export OP_SERVICE_ACCOUNT_TOKEN=$(op.exe read "${ONE_PASSWORD_TOKEN}")
else
  echo "OP_SERVICE_ACCOUNT_TOKEN already set, skipping 1password read"
fi

# Load all credentials at once using op inject
echo "Loading credentials from 1Password..."

# Use op inject to batch load all credentials in one operation
eval $(cat <<EOF | op inject
export OPNSENSE_API_KEY="{{ op://Pulumi/OPNsense/Key }}"
export OPNSENSE_API_SECRET="{{ op://Pulumi/OPNsense/Secret }}"
EOF
)

export OPNSENSE_ENDPOINT=https://opnsense.tobiash.net
