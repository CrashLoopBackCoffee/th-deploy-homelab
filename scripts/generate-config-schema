#!/usr/bin/env python3

import importlib
import os
import textwrap
import tomllib

from pathlib import Path


def get_config_root_model():
    with open('pyproject.toml', 'rb') as f:
        data = tomllib.load(f)

    config_root_model_str = data.get('tool', {}).get('pulumi', {}).get('config-root-model')

    if not config_root_model_str:
        return None

    module_name, class_name = config_root_model_str.rsplit(':', 1)
    module = importlib.import_module(module_name)
    return getattr(module, class_name)


def generate_json_schema():
    if os.environ.get('PULUMI_CI_SYSTEM'):
        return

    import json

    # Discover root model class
    root_model_class = get_config_root_model()
    if not root_model_class:
        return

    if hasattr(root_model_class, 'model_json_schema'):
        # Pydantic v2
        schema = json.dumps(root_model_class.model_json_schema())
    else:
        # Fallback to Pydantic v1
        schema = root_model_class.schema_json()
    with open('.config-schema.json', 'w') as f:
        f.write(schema)

    # Validate if schema is used in settings.json
    settings_file = Path('.vscode/settings.json')
    if not settings_file.exists():
        # No VSCode settings file found, we can safely create one
        Path('.vscode').mkdir(exist_ok=True)
        settings = {'yaml.schemas': {'.config-schema.json': 'Pulumi.*.yaml'}}
        with open(settings_file, 'w') as f:
            f.write(json.dumps(settings, indent=4))
        return

    with open(settings_file, 'r') as f:
        settings = json.load(f)

    schema_config = settings.get('yaml.schemas', {}).get('.config-schema.json')
    if not schema_config:
        print(
            'No schema found in .vscode/settings.json. Please add the following lines to the file:'
        )
        print(
            textwrap.dedent(
                """
                "yaml.schemas": {
                    ".config-schema.json": "Pulumi.*.yaml"
                }
                """
            )
        )


if __name__ == '__main__':
    generate_json_schema()
