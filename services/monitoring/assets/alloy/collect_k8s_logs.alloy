//===========================================================
// Kubernetes Log Collection
//===========================================================

//-----------------------------------------------------------
// Kubernetes Pod Discovery
//-----------------------------------------------------------
discovery.kubernetes "pods" {
	role = "pod"
}

discovery.relabel "pods" {
	targets = discovery.kubernetes.pods.targets

	rule {
		source_labels = ["__meta_kubernetes_pod_phase"]
		regex         = "Pending|Succeeded|Failed|Unknown"
		action        = "drop"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_container_name"]
		regex         = ""
		action        = "drop"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_node_name"]
		target_label  = "__host__"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_name"]
		target_label  = "pod"
	}

	rule {
		source_labels = ["__meta_kubernetes_namespace"]
		target_label  = "namespace"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_container_name"]
		target_label  = "container"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
		target_label  = "__path__"
		separator     = "/"
		regex         = "(.*)/(.*)"
		replacement   = "/var/log/pods/*$1*/$2/*.log"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_label_app"]
		target_label  = "app"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
		target_label  = "app"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_label_k8s_app"]
		target_label  = "app"
	}

	rule {
		source_labels = ["__meta_kubernetes_namespace"]
		target_label  = "service_name"
	}
}

//-----------------------------------------------------------
// Pod Log Collection via Kubernetes API
//-----------------------------------------------------------
loki.source.kubernetes "pods" {
	targets    = discovery.relabel.pods.output
	forward_to = [otelcol.receiver.loki.k8s_pods.receiver]
}

//-----------------------------------------------------------
// Kubernetes Events Collection
//-----------------------------------------------------------
loki.source.kubernetes_events "cluster_events" {
	log_format = "logfmt"
	forward_to = [loki.process.k8s_events.receiver]
}

loki.process "k8s_events" {
	forward_to = [loki.relabel.k8s_events.receiver]

	stage.logfmt {
		mapping = {
			"object_kind"         = "kind",
			"object_name"         = "name",
			"event_reason"        = "reason",
			"event_type"          = "type",
			"reporting_component" = "reportingComponent",
			"message"             = "msg",
		}
	}

	stage.labels {
		values = {
			"object_kind"  = "object_kind",
			"pod"          = "object_name",
			"event_reason" = "event_reason",
			"event_type"   = "event_type",
		}
	}
}

loki.relabel "k8s_events" {
	forward_to = [otelcol.receiver.loki.k8s_events.receiver]

	rule {
		target_label = "service_name"
		replacement  = "kubernetes-events"
	}
}

//-----------------------------------------------------------
// System Log Discovery and Collection
//-----------------------------------------------------------
local.file_match "system_logs" {
	path_targets = [
		{__path__ = "/var/log/syslog", job = "syslog"},
		{__path__ = "/var/log/kern.log", job = "kernlog"},
		{__path__ = "/var/log/auth.log", job = "authlog"},
		{__path__ = "/var/log/daemon.log", job = "daemonlog"},
		{__path__ = "/var/log/messages", job = "messages"},
	]
}

loki.source.file "system_logs" {
	targets    = local.file_match.system_logs.targets
	forward_to = [loki.relabel.system_logs.receiver]
}

loki.relabel "system_logs" {
	forward_to = [otelcol.receiver.loki.system_logs.receiver]

	rule {
		target_label = "service_name"
		replacement  = "kubernetes"
	}
}

//-----------------------------------------------------------
// Convert Loki logs to OpenTelemetry format
//-----------------------------------------------------------
otelcol.receiver.loki "k8s_pods" {
	output {
		logs = [otelcol.processor.resourcedetection.default.input]
	}
}

otelcol.receiver.loki "k8s_events" {
	output {
		logs = [otelcol.processor.resourcedetection.default.input]
	}
}

otelcol.receiver.loki "system_logs" {
	output {
		logs = [otelcol.processor.resourcedetection.default.input]
	}
}
