- name: Configure TLS certificate for Proxmox VE through built-in ACME client
  hosts: pve
  gather_facts: true
  tasks:
    - name: Query existing ACME accounts
      ansible.builtin.command: >
        pvesh get /cluster/acme/account --output-format=json
      register: get_accounts_result
      changed_when: false
      check_mode: false

    - name: Create ACME account if not yet existing
      when: not account_exists
      vars:
        account_exists: >-
          {{ get_accounts_result.stdout
          | from_json
          | selectattr('name', 'equalto', acme.account.name)
          | list
          | length > 0 }}
      block:
        - name: Query ACME directories
          ansible.builtin.command: pvesh get /cluster/acme/directories --output-format=json
          register: get_directories_result
          changed_when: false
          check_mode: false

        - name: Extract ACME directory URL
          ansible.builtin.set_fact:
            acme_directory_url: "{{ acme_staging_directory_url if acme.staging else acme_prod_directory_url }}"
          vars:
            acme_directories: "{{ get_directories_result.stdout | from_json }}"
            acme_prod_directory_url: "{{ acme_directories[0].url }}"
            acme_staging_directory_url: "{{ acme_directories[1].url }}"

        - name: Query Terms of Service
          ansible.builtin.command: pvesh get /cluster/acme/tos --output-format=json
          register: get_tos_result
          changed_when: false
          check_mode: false

        - name: Extract Terms of Services URL
          ansible.builtin.set_fact:
            acme_tos_url: "{{ get_tos_result.stdout | from_json }}"

        - name: Create ACME account
          ansible.builtin.command: pvesh create /cluster/acme/account
            --name={{ acme.account.name }}
            --contact={{ acme.account.contact }}
            --directory={{ acme_directory_url }}
            --tos_url={{ acme_tos_url }}
          changed_when: true

    - name: Query existing ACME plugins
      ansible.builtin.command: >
        pvenode acme plugin list --output-format=json
      register: get_plugins_result
      changed_when: false
      check_mode: false

    - name: Create ACME plugin if not yet existing
      when: not plugin_exists
      vars:
        plugin_exists: >-
          {{ get_plugins_result.stdout
          | from_json
          | selectattr('plugin', 'equalto', acme.plugin.name)
          | list
          | length > 0 }}
        acme_data_file: /root/.acme-plugin-data
      block:
        - name: Create plugin config data file
          ansible.builtin.copy:
            dest: "{{ acme_data_file }}"
            mode: "0600"
            content: |
              {% for item in acme.plugin.data %}
              {{ item.key }}={{ item.value }}
              {% endfor %}

        - name: Create ACME plugin for DNS challenge
          ansible.builtin.command:
            pvenode acme plugin add dns {{ acme.plugin.name }}
            --api={{ acme.plugin.api }}
            --data={{ acme_data_file }}
          changed_when: true

      always:
        - name: Delete plugin config data file
          ansible.builtin.file:
            dest: "{{ acme_data_file }}"
            state: absent

    - name: Check existence of ACME certificate
      ansible.builtin.stat:
        path: /etc/pve/local/pveproxy-ssl.pem
      register: cert_stat_result

    - name: Order TLS certificate
      ansible.builtin.shell:
        cmd:
          pvenode config set --acmedomain0 domain={{ inventory_hostname }},plugin={{ acme.plugin.name }} &&
          pvenode config set --acme=account={{ acme.account.name }} &&
          pvenode acme cert order --force=1
      changed_when: true
      when: not cert_stat_result.stat.exists
